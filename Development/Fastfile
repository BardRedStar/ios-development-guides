# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Constants
IPA_PATH = 'APP.ipa'
XCODEPROJ = './APP.xcodeproj'
WORKSPACE = 'APP.xcworkspace'
APPSTORE_APP_IDENTIFIER = 'com.APP_IDENTIFIER'

# Variables
@scheme = '' # debug scheme
@note = '' # Note for
@configuration = '' # debug configuration
@export_method = 'enterprise' # default Crashlytics deployment method
# env variable could be received from Jenkins build params
if ENV['TARGET'] == 'staging'
  #change if it's different env
  @scheme = ''
  @note = ''
  @configuration = ''
elsif ENV['TARGET'] == 'testflight'
  @scheme = ''
  @note = ''
  @configuration = ''
  @export_method = 'app-store' # required for Testflight
end

# Configuration
default_platform(:ios)

platform :ios do
  desc "Description of what the lane does"
  lane :release do
    # Bump build version
    increment_build_number_in_plist(
      build_number: ci_build_number,
      scheme: @scheme,
    )
    # Build
    gym(
      clean: true,
      workspace: WORKSPACE,
      scheme: @scheme,
      configuration: @configuration,
      output_name: IPA_PATH,
      export_method: @export_method,
    )
    # Deploy
    if ENV['TARGET'] == 'testflight'
      testflight(
        ipa: IPA_PATH,
        changelog: @note,
        app_identifier: APPSTORE_APP_IDENTIFIER, # required for proper project identification
        skip_waiting_for_build_processing: true, # we can skip waiting without notification about
                                                 # suceeded processing in iTunes Connect.
                                                 # Also that would free Jenkins queue from waiting.
      )
    else
      crashlytics(
        build_secret: '', # get it from jenkins examples
        api_token: '', # get it from jenkins examples
        ipa_path: IPA_PATH,
        groups: [], # define groups to receive builds
        notes: @note,
      )
    end
  end

  # uses `versioning` plugin
  desc "Update application build number with ci build number"
  lane :set_build_number_from_ci do
    increment_build_number_in_plist(
      build_number: ci_build_number,
    )
  end

  desc "Increment application patch version number (#.#.x -> #.#.x+1)"
  lane :increment_version_number_patch do
    increment_version_number_in_plist
  end
end
